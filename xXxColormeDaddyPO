npm install
Open server/.env
your_replicate_token_here 
 server/generate.js
 replace your-model-version-id
 chilloutmix or deliberate.
npm start
 http://localhost:3000
Type an erotic prompt → Get line art → Create your NSFW coloring book.
# Adding the missing PDF generation integration and an example image-saving utility
# Update or add new files to complete the build for PDF generation and image saving
additional_files = {
    "ErotiColorGPT/server/saveImage.js": """
const fs = require("fs");
const https = require("https");
const path = require("path");
function downloadImage(url, filename) {
  const filePath = path.resolve(__dirname, "../images", filename);
  const file = fs.createWriteStream(filePath);
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      response.pipe(file);
      file.on("finish", () => {
        file.close(() => resolve(filePath));
      });
Deploy XxXColormeDirty/xXxcoloringbook.exe
    }).on("error", (err) => {
      fs.unlink(filePath, () => reject(err.message));
    });
  });
}
module.exports = { downloadImage };
""",
    "ErotiColorGPT/server/generate-pdf.js": """
const { createColoringBook } = require("../pdf/builder");
const fs = require("fs");
async function generatePdf(imagePaths) {
  const timestamp = Date.now();
  const outputPath = `./pdf/erotic-book-${timestamp}.pdf`;
  createColoringBook(imagePaths, outputPath);
  return outputPath;
}
module.exports = { generatePdf };
""",
    "ErotiColorGPT/server/server.js": """
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const path = require("path");
require("dotenv").config();
const { generateImage } = require("./generate");
const { downloadImage } = require("./saveImage");
const { generatePdf } = require("./generate-pdf");
const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "../client")));
let generatedImages = [];
app.post("/generate", async (req, res) => {
  const { prompt } = req.body;
  try {
    const imageUrl = await generateImage(prompt);
    const filename = `image-${Date.now()}.png`;
    const localPath = await downloadImage(imageUrl, filename);
    generatedImages.push(localPath);
    res.json({ url: imageUrl });
  } catch (error) {
    res.status(500).json({ error: "Image generation failed." });
  }
});
app.post("/build-pdf", async (req, res) => {
  try {
    const pdfPath = await generatePdf(generatedImages);
    generatedImages = []; // clear after generating
    res.download(pdfPath);
  } catch (error) {
    res.status(500).json({ error: "PDF generation failed." });
  }
});
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
"""
}
# Add additional files to the zip
with zipfile.ZipFile(zip_path, "a") as z:
    for path, content in additional_files.items():
        full_path = os.path.join("/mnt/data", path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, "w") as f:
            f.write(content.strip())
        z.write(full_path, arcname=path) zip_path POST /build-pdf
STRIPE_SECRET_KEY=sk_test_...
npm start
http://localhost:3000/checkout.html
# Adding Stripe integration for checkout

stripe_files = {
    "ErotiColorGPT/server/stripe.js": """
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);

async function createCheckoutSession() {
  const session = await stripe.checkout.sessions.create({
    payment_method_types: ["card"],
    line_items: [
      {
        price_data: {
          currency: "usd",
          product_data: {
            name: "Adult Erotic Coloring Book",
            description: "Downloadable PDF of AI-generated erotic line art.",
          },
          unit_amount: 1200, // $12.00 in cents
        },
        quantity: 1,
      },
    ],
    mode: "payment",
    success_url: "http://localhost:3000/success.html",
    cancel_url: "http://localhost:3000/cancel.html",
  });

  return session.url;
}

module.exports = { createCheckoutSession };
""",
    "ErotiColorGPT/server/server.js": """
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const path = require("path");
require("dotenv").config();

const { generateImage } = require("./generate");
const { downloadImage } = require("./saveImage");
const { generatePdf } = require("./generate-pdf");
const { createCheckoutSession } = require("./stripe");

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "../client")));

let generatedImages = [];

app.post("/generate", async (req, res) => {
  const { prompt } = req.body;
  try {
    const imageUrl = await generateImage(prompt);
    const filename = `image-${Date.now()}.png`;
    const localPath = await downloadImage(imageUrl, filename);
    generatedImages.push(localPath);
    res.json({ url: imageUrl });
  } catch (error) {
    res.status(500).json({ error: "Image generation failed." });
  }
});

app.post("/build-pdf", async (req, res) => {
  try {
    const pdfPath = await generatePdf(generatedImages);
    generatedImages = [];
    res.download(pdfPath);
  } catch (error) {
    res.status(500).json({ error: "PDF generation failed." });
  }
});

app.get("/checkout", async (req, res) => {
  try {
    const url = await createCheckoutSession();
    res.json({ url });
  } catch (err) {
    res.status(500).json({ error: "Stripe checkout failed." });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
""",
    "ErotiColorGPT/client/checkout.html": """
<!DOCTYPE html>
<html>
<head>
  <title>Buy Book</title>
</head>
<body>
  <h1>Buy Erotic Coloring Book - $12.00</h1>
  <button id="checkout">Proceed to Payment</button>

  <script>
    document.getElementById("checkout").addEventListener("click", async () => {
      const res = await fetch("/checkout");
      const data = await res.json();
      window.location = data.url;
    });
  </script>
</body>
</html>
""",
    "ErotiColorGPT/client/success.html": """
<!DOCTYPE html>
<html>
<head>
  <title>Success</title>
</head>
<body>
  <h1>Payment Successful!</h1>
  <p>Your erotic coloring book PDF will be ready shortly.</p>
</body>
</html>
""",
    "ErotiColorGPT/client/cancel.html": """
<!DOCTYPE html>
<html>
<head>
  <title>Cancelled</title>
</head>
<body>
  <h1>Payment Cancelled</h1>
  <p>No worries. Come back anytime for some sexy art!</p>
</body>
</html>
""",
    "ErotiColorGPT/server/.env": """
REPLICATE_API_TOKEN=your_replicate_token_here
STRIPE_SECRET_KEY=your_stripe_secret_key_here
"""
}

# Add the updated and new Stripe-related files to the project zip
with zipfile.ZipFile(zip_path, "a") as z:
    for path, content in stripe_files.items():
        full_path = os.path.join("/mnt/data", path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, "w") as f:
            f.write(content.strip())
        z.write(full_path, arcname=path) zip_path)
# Adding automated PDF unlock + email delivery on Stripe payment success using a webhook

webhook_files = {
    "ErotiColorGPT/server/webhook.js": """
const express = require("express");
const { buffer } = require("micro");
const fs = require("fs");
const path = require("path");
const { generatePdf } = require("./generate-pdf");
const { sendEmailWithAttachment } = require("./mailer");

const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;

const router = express.Router();

let generatedImages = [];

router.post("/webhook", express.raw({ type: "application/json" }), async (req, res) => {
  const sig = req.headers["stripe-signature"];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);
  } catch (err) {
    console.error("Webhook Error:", err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === "checkout.session.completed") {
    const session = event.data.object;
    const customerEmail = session.customer_details.email;

    console.log("Payment succeeded for:", customerEmail);

    const dummyImages = [
      "./images/sample1.png",
      "./images/sample2.png"
    ];

    const pdfPath = await generatePdf(dummyImages); // Replace with real images if needed

    await sendEmailWithAttachment(customerEmail, pdfPath);
  }

  res.status(200).json({ received: true });
});

module.exports = router;
""",
    "ErotiColorGPT/server/mailer.js": """
const nodemailer = require("nodemailer");

async function sendEmailWithAttachment(to, filePath) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.MAIL_USER,
      pass: process.env.MAIL_PASS,
    },
  });

  const info = await transporter.sendMail({
    from: '"ErotiColorGPT" <no-reply@eroticolor.com>',
    to,
    subject: "Your Erotic Coloring Book PDF",
    text: "Thanks for your purchase! Your custom adult coloring book is attached.",
    attachments: [
      {
        filename: "erotic_coloring_book.pdf",
        path: filePath,
      },
    ],
  });

  console.log("Email sent:", info.messageId);
}

module.exports = { sendEmailWithAttachment };
""",
    "ErotiColorGPT/server/server.js": """
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const path = require("path");
require("dotenv").config();

const { generateImage } = require("./generate");
const { downloadImage } = require("./saveImage");
const { generatePdf } = require("./generate-pdf");
const { createCheckoutSession } = require("./stripe");
const webhookRoutes = require("./webhook");

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "../client")));

let generatedImages = [];

app.post("/generate", async (req, res) => {
  const { prompt } = req.body;
  try {
    const imageUrl = await generateImage(prompt);
    const filename = `image-${Date.now()}.png`;
    const localPath = await downloadImage(imageUrl, filename);
    generatedImages.push(localPath);
    res.json({ url: imageUrl });
  } catch (error) {
    res.status(500).json({ error: "Image generation failed." });
  }
});

app.post("/build-pdf", async (req, res) => {
  try {
    const pdfPath = await generatePdf(generatedImages);
    generatedImages = [];
    res.download(pdfPath);
  } catch (error) {
    res.status(500).json({ error: "PDF generation failed." });
  }
});

app.get("/checkout", async (req, res) => {
  try {
    const url = await createCheckoutSession();
    res.json({ url });
  } catch (err) {
    res.status(500).json({ error: "Stripe checkout failed." });
  }
});

// Stripe Webhook
app.use("/", webhookRoutes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
""",
    "ErotiColorGPT/server/.env": """
REPLICATE_API_TOKEN=your_replicate_token_here
STRIPE_SECRET_KEY=your_stripe_secret_key_here
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret_here
MAIL_USER="Daustinphotography831@gmail.com"
MAIL_PASS "PasswordsNeverWork"
"""
}

# Add new and updated files with webhook and email integration
with zipfile.ZipFile(zip_path, "a") as z:
    for path, content in webhook_files.items():
        full_path = os.path.join("/mnt/data", path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, "w") as f:
            f.write(content.strip())
        z.write(full_path, arcname=path)
zip_path_}
{
<!DOCTYPE html>
<html>
  <head>
    <title>Subscribe to a cool new product</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://js.stripe.com/v3/"></script>
  </head>
  <body>
    <section>
      <div class="product">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="14px" height="16px" viewBox="0 0 14 16" version="1.1">
            <defs/>
            <g id="Flow" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g id="0-Default" transform="translate(-121.000000, -40.000000)" fill="#E184DF">
                    <path d="M127,50 L126,50 C123.238576,50 121,47.7614237 121,45 C121,42.2385763 123.238576,40 126,40 L135,40 L135,56 L133,56 L133,42 L129,42 L129,56 L127,56 L127,50 Z M127,48 L127,42 L126,42 C124.343146,42 123,43.3431458 123,45 C123,46.6568542 124.343146,48 126,48 L127,48 Z" id="Pilcrow"/>
                </g>
            </g>
        </svg>
        <div class="description">
          <h3>Starter plan</h3>
          <h5>$20.00 / month</h5>
        </div>
      </div>
      <form action="/create-checkout-session" method="POST">
        <!-- Add a hidden field with the lookup_key of your Price -->
        <input type="hidden" name="lookup_key" value="{{PRICE_LOOKUP_KEY}}" />
        <button id="checkout-and-portal-button" type="submit">Checkout</button>
      </form>
    </section>
  </body>
</html><!DOCTYPE html>
<html>
<head>
  <title>Thanks for your order!</title>
  <link rel="stylesheet" href="style.css">
  <script src="client.js" defer></script>
</head>
<body>
  <section>
    <div class="product Box-root">
      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="14px" height="16px" viewBox="0 0 14 16" version="1.1">
          <defs/>
          <g id="Flow" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
              <g id="0-Default" transform="translate(-121.000000, -40.000000)" fill="#E184DF">
                  <path d="M127,50 L126,50 C123.238576,50 121,47.7614237 121,45 C121,42.2385763 123.238576,40 126,40 L135,40 L135,56 L133,56 L133,42 L129,42 L129,56 L127,56 L127,50 Z M127,48 L127,42 L126,42 C124.343146,42 123,43.3431458 123,45 C123,46.6568542 124.343146,48 126,48 L127,48 Z" id="Pilcrow"/>
              </g>
          </g>
      </svg>
      <div class="description Box-root">
        <h3>Subscription to Starter plan successful!</h3>
      </div>
    </div>
    <form action="/create-portal-session" method="POST">
      <input type="hidden" id="session-id" name="session_id" value="" />
      <button id="checkout-and-portal-button" type="submit">Manage your billing information</button>
    </form>
  </section>
</body>
</html><!DOCTYPE html>
<html>
<head>
  <title>Checkout canceled</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <section>
    <p>Picked the wrong subscription? Shop around then come back to pay!</p>
  </section>
</body>
</html>// In production, this should check CSRF, and not pass the session ID.
// The customer ID for the portal should be pulled from the
// authenticated user on the server.
document.addEventListener('DOMContentLoaded', async () => {
  let searchParams = new URLSearchParams(window.location.search);
  if (searchParams.has('session_id')) {
    const session_id = searchParams.get('session_id');
    document.getElementById('session-id').setAttribute('value', session_id);
  }
});require 'stripe'
require 'sinatra'

# This is your test secret API key.
Stripe.api_key = 'sk_test_51RARwuRoJ0RJyOumH3UJFCLFqgoZ2oZ0smJFkraqz9Ch32oI3LYgr7zugzSIXO8iQEeJqPkSk29lO5oyUHRbLXMv00OwHQNpVW'

set :static, true
set :port, 4242

YOUR_DOMAIN = 'http://localhost:4242'

post '/create-checkout-session' do
  prices = Stripe::Price.list(
    lookup_keys: [params['lookup_key']],
    expand: ['data.product']
  )

  begin
    session = Stripe::Checkout::Session.create({
      mode: 'subscription',
      line_items: [{
        quantity: 1,
        price: prices.data[0].id
      }],
      success_url: YOUR_DOMAIN + '/success.html?session_id={CHECKOUT_SESSION_ID}',
      cancel_url: YOUR_DOMAIN + '/cancel.html',
    })
  rescue StandardError => e
    halt 400,
        { 'Content-Type' => 'application/json' },
        { 'error': { message: e.error.message } }.to_json
  end

  redirect session.url, 303
end

post '/create-portal-session' do
  content_type 'application/json'
  # For demonstration purposes, we're using the Checkout session to retrieve the customer ID.
  # Typically this is stored alongside the authenticated user in your database.
  checkout_session_id = params['session_id']
  checkout_session = Stripe::Checkout::Session.retrieve(checkout_session_id)

  # This is the URL to which users will be redirected after they're done
  # managing their billing.
  return_url = YOUR_DOMAIN

  session = Stripe::BillingPortal::Session.create({
                                                    customer: checkout_session.customer,
                                                    return_url: return_url
                                                  })
  redirect session.url, 303
end

post '/webhook' do
  # Replace this endpoint secret with your endpoint's unique secret
  # If you are testing with the CLI, find the secret by running 'stripe listen'
  # If you are using an endpoint defined with the API or dashboard, look in your webhook settings
  # at https://dashboard.stripe.com/webhooks
  webhook_secret = 'whsec_12345'
  payload = request.body.read
  if !webhook_secret.empty?
    # Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
    sig_header = request.env['HTTP_STRIPE_SIGNATURE']
    event = nil

    begin
      event = Stripe::Webhook.construct_event(
        payload, sig_header, webhook_secret
      )
    rescue JSON::ParserError => e
      # Invalid payload
      status 400
      return
    rescue Stripe::SignatureVerificationError => e
      # Invalid signature
      puts '⚠️  Webhook signature verification failed.'
      status 400
      return
    end
  else
    data = JSON.parse(payload, symbolize_names: true)
    event = Stripe::Event.construct_from(data)
  end
  # Get the type of webhook event sent - used to check the status of PaymentIntents.
  event_type = event['type']
  data = event['data']
  data_object = data['object']

  if event.type == 'customer.subscription.deleted'
    # handle subscription canceled automatically based
    # upon your subscription settings. Or if the user cancels it.
    # puts data_object
    puts "Subscription canceled: #{event.id}"
  end

  if event.type == 'customer.subscription.updated'
    # handle subscription updated
    # puts data_object
    puts "Subscription updated: #{event.id}"
  end

  if event.type == 'customer.subscription.created'
    # handle subscription created
    # puts data_object
    puts "Subscription created: #{event.id}"
  end

  if event.type == 'customer.subscription.trial_will_end'
    # handle subscription trial ending
    # puts data_object
    puts "Subscription trial will end: #{event.id}"
  end

  if event.type == 'entitlements.active_entitlement_summary.updated'
    # handle active entitlement summary updated
    # puts data_object
    puts "Active entitlement summary updated: #{event.id}"
  end

  content_type 'application/json'
  {
    status: 'success'
  }.to_json
end



