npm install
Open server/.env
your_replicate_token_here 
 server/generate.js
 replace your-model-version-id
 chilloutmix or deliberate.
npm start
 http://localhost:3000
Type an erotic prompt → Get line art → Create your NSFW coloring book.

# Adding the missing PDF generation integration and an example image-saving utility

# Update or add new files to complete the build for PDF generation and image saving
additional_files = {
    "ErotiColorGPT/server/saveImage.js": """
const fs = require("fs");
const https = require("https");
const path = require("path");

function downloadImage(url, filename) {
  const filePath = path.resolve(__dirname, "../images", filename);
  const file = fs.createWriteStream(filePath);
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      response.pipe(file);
      file.on("finish", () => {
        file.close(() => resolve(filePath));
      });
    }).on("error", (err) => {
      fs.unlink(filePath, () => reject(err.message));
    });
  });
}

module.exports = { downloadImage };
""",
    "ErotiColorGPT/server/generate-pdf.js": """
const { createColoringBook } = require("../pdf/builder");
const fs = require("fs");

async function generatePdf(imagePaths) {
  const timestamp = Date.now();
  const outputPath = `./pdf/erotic-book-${timestamp}.pdf`;
  createColoringBook(imagePaths, outputPath);
  return outputPath;
}

module.exports = { generatePdf };
""",
    "ErotiColorGPT/server/server.js": """
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const path = require("path");
require("dotenv").config();

const { generateImage } = require("./generate");
const { downloadImage } = require("./saveImage");
const { generatePdf } = require("./generate-pdf");

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "../client")));

let generatedImages = [];

app.post("/generate", async (req, res) => {
  const { prompt } = req.body;
  try {
    const imageUrl = await generateImage(prompt);
    const filename = `image-${Date.now()}.png`;
    const localPath = await downloadImage(imageUrl, filename);
    generatedImages.push(localPath);
    res.json({ url: imageUrl });
  } catch (error) {
    res.status(500).json({ error: "Image generation failed." });
  }
});

app.post("/build-pdf", async (req, res) => {
  try {
    const pdfPath = await generatePdf(generatedImages);
    generatedImages = []; // clear after generating
    res.download(pdfPath);
  } catch (error) {
    res.status(500).json({ error: "PDF generation failed." });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
"""
}

# Add additional files to the zip
with zipfile.ZipFile(zip_path, "a") as z:
    for path, content in additional_files.items():
        full_path = os.path.join("/mnt/data", path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, "w") as f:
            f.write(content.strip())
        z.write(full_path, arcname=path)

zip_path
POST /build-pdf

